(()=>{"use strict";var e,t=new Uint8Array(16);function n(){if(!e&&!(e="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return e(t)}const r=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i,a=function(e){return"string"==typeof e&&r.test(e)};for(var o=[],i=0;i<256;++i)o.push((i+256).toString(16).substr(1));const u=function(e,t,r){var i=(e=e||{}).random||(e.rng||n)();if(i[6]=15&i[6]|64,i[8]=63&i[8]|128,t){r=r||0;for(var u=0;u<16;++u)t[r+u]=i[u];return t}return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=(o[e[t+0]]+o[e[t+1]]+o[e[t+2]]+o[e[t+3]]+"-"+o[e[t+4]]+o[e[t+5]]+"-"+o[e[t+6]]+o[e[t+7]]+"-"+o[e[t+8]]+o[e[t+9]]+"-"+o[e[t+10]]+o[e[t+11]]+o[e[t+12]]+o[e[t+13]]+o[e[t+14]]+o[e[t+15]]).toLowerCase();if(!a(n))throw TypeError("Stringified UUID is invalid");return n}(i)},c=(e,t,n,r)=>({id:u(),name:e,priority:t,dueDate:n,project:r});function s(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function d(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function l(e){d(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function m(e,t){d(2,arguments);var n=l(e),r=s(t);return isNaN(r)?new Date(NaN):r?(n.setDate(n.getDate()+r),n):n}function f(e,t){d(2,arguments);var n=l(e),r=s(t);if(isNaN(r))return new Date(NaN);if(!r)return n;var a=n.getDate(),o=new Date(n.getTime());o.setMonth(n.getMonth()+r+1,0);var i=o.getDate();return a>=i?o:(n.setFullYear(o.getFullYear(),o.getMonth(),a),n)}function h(e,t){d(2,arguments);var n=s(t);return m(e,-n)}function g(e,t){d(2,arguments);var n=s(t);return f(e,-n)}function y(e){d(1,arguments);var t=l(e);return!isNaN(t)}var p={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function w(e){return function(t){var n=t||{},r=n.width?String(n.width):e.defaultWidth;return e.formats[r]||e.formats[e.defaultWidth]}}var v,b={date:w({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:w({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:w({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},S={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function C(e){return function(t,n){var r,a=n||{};if("formatting"===(a.context?String(a.context):"standalone")&&e.formattingValues){var o=e.defaultFormattingWidth||e.defaultWidth,i=a.width?String(a.width):o;r=e.formattingValues[i]||e.formattingValues[o]}else{var u=e.defaultWidth,c=a.width?String(a.width):e.defaultWidth;r=e.values[c]||e.values[u]}return r[e.argumentCallback?e.argumentCallback(t):t]}}function k(e){return function(t,n){var r=String(t),a=n||{},o=a.width,i=o&&e.matchPatterns[o]||e.matchPatterns[e.defaultMatchWidth],u=r.match(i);if(!u)return null;var c,s=u[0],d=o&&e.parsePatterns[o]||e.parsePatterns[e.defaultParseWidth];return c="[object Array]"===Object.prototype.toString.call(d)?function(e,t){for(var n=0;n<e.length;n++)if(e[n].test(s))return n}(d):function(e,t){for(var n in e)if(e.hasOwnProperty(n)&&e[n].test(s))return n}(d),c=e.valueCallback?e.valueCallback(c):c,{value:c=a.valueCallback?a.valueCallback(c):c,rest:r.slice(s.length)}}}const T={code:"en-US",formatDistance:function(e,t,n){var r;return n=n||{},r="string"==typeof p[e]?p[e]:1===t?p[e].one:p[e].other.replace("{{count}}",t),n.addSuffix?n.comparison>0?"in "+r:r+" ago":r},formatLong:b,formatRelative:function(e,t,n,r){return S[e]},localize:{ordinalNumber:function(e,t){var n=Number(e),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:C({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:C({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return Number(e)-1}}),month:C({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:C({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:C({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(v={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e,t){var n=String(e),r=t||{},a=n.match(v.matchPattern);if(!a)return null;var o=a[0],i=n.match(v.parsePattern);if(!i)return null;var u=v.valueCallback?v.valueCallback(i[0]):i[0];return{value:u=r.valueCallback?r.valueCallback(u):u,rest:n.slice(o.length)}}),era:k({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:k({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:k({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:k({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:k({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};function D(e,t){d(2,arguments);var n=l(e).getTime(),r=s(t);return new Date(n+r)}function q(e,t){d(2,arguments);var n=s(t);return D(e,-n)}function x(e,t){for(var n=e<0?"-":"",r=Math.abs(e).toString();r.length<t;)r="0"+r;return n+r}const M=function(e,t){var n=e.getUTCFullYear(),r=n>0?n:1-n;return x("yy"===t?r%100:r,t.length)},j=function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):x(n+1,2)},E=function(e,t){return x(e.getUTCDate(),t.length)},N=function(e,t){return x(e.getUTCHours()%12||12,t.length)},P=function(e,t){return x(e.getUTCHours(),t.length)},U=function(e,t){return x(e.getUTCMinutes(),t.length)},L=function(e,t){return x(e.getUTCSeconds(),t.length)},O=function(e,t){var n=t.length,r=e.getUTCMilliseconds();return x(Math.floor(r*Math.pow(10,n-3)),t.length)};var W=864e5;function Y(e){d(1,arguments);var t=1,n=l(e),r=n.getUTCDay(),a=(r<t?7:0)+r-t;return n.setUTCDate(n.getUTCDate()-a),n.setUTCHours(0,0,0,0),n}function I(e){d(1,arguments);var t=l(e),n=t.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(n+1,0,4),r.setUTCHours(0,0,0,0);var a=Y(r),o=new Date(0);o.setUTCFullYear(n,0,4),o.setUTCHours(0,0,0,0);var i=Y(o);return t.getTime()>=a.getTime()?n+1:t.getTime()>=i.getTime()?n:n-1}function F(e){d(1,arguments);var t=I(e),n=new Date(0);n.setUTCFullYear(t,0,4),n.setUTCHours(0,0,0,0);var r=Y(n);return r}var z=6048e5;function H(e,t){d(1,arguments);var n=t||{},r=n.locale,a=r&&r.options&&r.options.weekStartsOn,o=null==a?0:s(a),i=null==n.weekStartsOn?o:s(n.weekStartsOn);if(!(i>=0&&i<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var u=l(e),c=u.getUTCDay(),m=(c<i?7:0)+c-i;return u.setUTCDate(u.getUTCDate()-m),u.setUTCHours(0,0,0,0),u}function A(e,t){d(1,arguments);var n=l(e,t),r=n.getUTCFullYear(),a=t||{},o=a.locale,i=o&&o.options&&o.options.firstWeekContainsDate,u=null==i?1:s(i),c=null==a.firstWeekContainsDate?u:s(a.firstWeekContainsDate);if(!(c>=1&&c<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var m=new Date(0);m.setUTCFullYear(r+1,0,c),m.setUTCHours(0,0,0,0);var f=H(m,t),h=new Date(0);h.setUTCFullYear(r,0,c),h.setUTCHours(0,0,0,0);var g=H(h,t);return n.getTime()>=f.getTime()?r+1:n.getTime()>=g.getTime()?r:r-1}function G(e,t){d(1,arguments);var n=t||{},r=n.locale,a=r&&r.options&&r.options.firstWeekContainsDate,o=null==a?1:s(a),i=null==n.firstWeekContainsDate?o:s(n.firstWeekContainsDate),u=A(e,t),c=new Date(0);c.setUTCFullYear(u,0,i),c.setUTCHours(0,0,0,0);var l=H(c,t);return l}var X=6048e5;function J(e,t){var n=e>0?"-":"+",r=Math.abs(e),a=Math.floor(r/60),o=r%60;if(0===o)return n+String(a);var i=t||"";return n+String(a)+i+x(o,2)}function Q(e,t){return e%60==0?(e>0?"-":"+")+x(Math.abs(e)/60,2):R(e,t)}function R(e,t){var n=t||"",r=e>0?"-":"+",a=Math.abs(e);return r+x(Math.floor(a/60),2)+n+x(a%60,2)}const B={G:function(e,t,n){var r=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});case"GGGG":default:return n.era(r,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var r=e.getUTCFullYear(),a=r>0?r:1-r;return n.ordinalNumber(a,{unit:"year"})}return M(e,t)},Y:function(e,t,n,r){var a=A(e,r),o=a>0?a:1-a;return"YY"===t?x(o%100,2):"Yo"===t?n.ordinalNumber(o,{unit:"year"}):x(o,t.length)},R:function(e,t){return x(I(e),t.length)},u:function(e,t){return x(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(r);case"QQ":return x(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});case"QQQQ":default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(r);case"qq":return x(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});case"qqqq":default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(e,t,n){var r=e.getUTCMonth();switch(t){case"M":case"MM":return j(e,t);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});case"MMMM":default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(e,t,n){var r=e.getUTCMonth();switch(t){case"L":return String(r+1);case"LL":return x(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});case"LLLL":default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(e,t,n,r){var a=function(e,t){d(1,arguments);var n=l(e),r=H(n,t).getTime()-G(n,t).getTime();return Math.round(r/X)+1}(e,r);return"wo"===t?n.ordinalNumber(a,{unit:"week"}):x(a,t.length)},I:function(e,t,n){var r=function(e){d(1,arguments);var t=l(e),n=Y(t).getTime()-F(t).getTime();return Math.round(n/z)+1}(e);return"Io"===t?n.ordinalNumber(r,{unit:"week"}):x(r,t.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):E(e,t)},D:function(e,t,n){var r=function(e){d(1,arguments);var t=l(e),n=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var r=t.getTime(),a=n-r;return Math.floor(a/W)+1}(e);return"Do"===t?n.ordinalNumber(r,{unit:"dayOfYear"}):x(r,t.length)},E:function(e,t,n){var r=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});case"EEEE":default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(e,t,n,r){var a=e.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(t){case"e":return String(o);case"ee":return x(o,2);case"eo":return n.ordinalNumber(o,{unit:"day"});case"eee":return n.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(a,{width:"short",context:"formatting"});case"eeee":default:return n.day(a,{width:"wide",context:"formatting"})}},c:function(e,t,n,r){var a=e.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(t){case"c":return String(o);case"cc":return x(o,t.length);case"co":return n.ordinalNumber(o,{unit:"day"});case"ccc":return n.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(a,{width:"narrow",context:"standalone"});case"cccccc":return n.day(a,{width:"short",context:"standalone"});case"cccc":default:return n.day(a,{width:"wide",context:"standalone"})}},i:function(e,t,n){var r=e.getUTCDay(),a=0===r?7:r;switch(t){case"i":return String(a);case"ii":return x(a,t.length);case"io":return n.ordinalNumber(a,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});case"iiii":default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(e,t,n){var r=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});case"aaaa":default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(e,t,n){var r,a=e.getUTCHours();switch(r=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});case"bbbb":default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(e,t,n){var r,a=e.getUTCHours();switch(r=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});case"BBBB":default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var r=e.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return N(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):P(e,t)},K:function(e,t,n){var r=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(r,{unit:"hour"}):x(r,t.length)},k:function(e,t,n){var r=e.getUTCHours();return 0===r&&(r=24),"ko"===t?n.ordinalNumber(r,{unit:"hour"}):x(r,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):U(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):L(e,t)},S:function(e,t){return O(e,t)},X:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();if(0===a)return"Z";switch(t){case"X":return Q(a);case"XXXX":case"XX":return R(a);case"XXXXX":case"XXX":default:return R(a,":")}},x:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"x":return Q(a);case"xxxx":case"xx":return R(a);case"xxxxx":case"xxx":default:return R(a,":")}},O:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+J(a,":");case"OOOO":default:return"GMT"+R(a,":")}},z:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+J(a,":");case"zzzz":default:return"GMT"+R(a,":")}},t:function(e,t,n,r){var a=r._originalDate||e;return x(Math.floor(a.getTime()/1e3),t.length)},T:function(e,t,n,r){return x((r._originalDate||e).getTime(),t.length)}};function $(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});case"PPPP":default:return t.date({width:"full"})}}function V(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});case"pppp":default:return t.time({width:"full"})}}const Z={p:V,P:function(e,t){var n,r=e.match(/(P+)(p+)?/),a=r[1],o=r[2];if(!o)return $(e,t);switch(a){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;case"PPPP":default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",$(a,t)).replace("{{time}}",V(o,t))}};function _(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}var K=["D","DD"],ee=["YY","YYYY"];function te(e){return-1!==K.indexOf(e)}function ne(e){return-1!==ee.indexOf(e)}function re(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"))}var ae=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,oe=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,ie=/^'([^]*?)'?$/,ue=/''/g,ce=/[a-zA-Z]/;function se(e,t,n){d(2,arguments);var r=String(t),a=n||{},o=a.locale||T,i=o.options&&o.options.firstWeekContainsDate,u=null==i?1:s(i),c=null==a.firstWeekContainsDate?u:s(a.firstWeekContainsDate);if(!(c>=1&&c<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var m=o.options&&o.options.weekStartsOn,f=null==m?0:s(m),h=null==a.weekStartsOn?f:s(a.weekStartsOn);if(!(h>=0&&h<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!o.localize)throw new RangeError("locale must contain localize property");if(!o.formatLong)throw new RangeError("locale must contain formatLong property");var g=l(e);if(!y(g))throw new RangeError("Invalid time value");var p=_(g),w=q(g,p),v={firstWeekContainsDate:c,weekStartsOn:h,locale:o,_originalDate:g},b=r.match(oe).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,Z[t])(e,o.formatLong,v):e})).join("").match(ae).map((function(n){if("''"===n)return"'";var r=n[0];if("'"===r)return de(n);var i=B[r];if(i)return!a.useAdditionalWeekYearTokens&&ne(n)&&re(n,t,e),!a.useAdditionalDayOfYearTokens&&te(n)&&re(n,t,e),i(w,n,o.localize,v);if(r.match(ce))throw new RangeError("Format string contains an unescaped latin alphabet character `"+r+"`");return n})).join("");return b}function de(e){return e.match(ie)[1].replace(ue,"'")}function le(e){d(1,arguments);var t=l(e);return t.setHours(0,0,0,0),t}var me=864e5,fe=36e5,he={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},ge=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,ye=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,pe=/^([+-])(\d{2})(?::?(\d{2}))?$/;function we(e,t){d(1,arguments);var n=t||{},r=null==n.additionalDigits?2:s(n.additionalDigits);if(2!==r&&1!==r&&0!==r)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof e&&"[object String]"!==Object.prototype.toString.call(e))return new Date(NaN);var a,o=ve(e);if(o.date){var i=be(o.date,r);a=Se(i.restDateString,i.year)}if(isNaN(a)||!a)return new Date(NaN);var u,c=a.getTime(),l=0;if(o.time&&(l=ke(o.time),isNaN(l)||null===l))return new Date(NaN);if(!o.timezone){var m=new Date(c+l),f=new Date(0);return f.setFullYear(m.getUTCFullYear(),m.getUTCMonth(),m.getUTCDate()),f.setHours(m.getUTCHours(),m.getUTCMinutes(),m.getUTCSeconds(),m.getUTCMilliseconds()),f}return u=De(o.timezone),isNaN(u)?new Date(NaN):new Date(c+l+u)}function ve(e){var t,n={},r=e.split(he.dateTimeDelimiter);if(r.length>2)return n;if(/:/.test(r[0])?(n.date=null,t=r[0]):(n.date=r[0],t=r[1],he.timeZoneDelimiter.test(n.date)&&(n.date=e.split(he.timeZoneDelimiter)[0],t=e.substr(n.date.length,e.length))),t){var a=he.timezone.exec(t);a?(n.time=t.replace(a[1],""),n.timezone=a[1]):n.time=t}return n}function be(e,t){var n=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+t)+"})|(\\d{2}|[+-]\\d{"+(2+t)+"})$)"),r=e.match(n);if(!r)return{year:null};var a=r[1]&&parseInt(r[1]),o=r[2]&&parseInt(r[2]);return{year:null==o?a:100*o,restDateString:e.slice((r[1]||r[2]).length)}}function Se(e,t){if(null===t)return null;var n=e.match(ge);if(!n)return null;var r=!!n[4],a=Ce(n[1]),o=Ce(n[2])-1,i=Ce(n[3]),u=Ce(n[4]),c=Ce(n[5])-1;if(r)return function(e,t,n){return t>=1&&t<=53&&n>=0&&n<=6}(0,u,c)?function(e,t,n){var r=new Date(0);r.setUTCFullYear(e,0,4);var a=7*(t-1)+n+1-(r.getUTCDay()||7);return r.setUTCDate(r.getUTCDate()+a),r}(t,u,c):new Date(NaN);var s=new Date(0);return function(e,t,n){return t>=0&&t<=11&&n>=1&&n<=(qe[t]||(xe(e)?29:28))}(t,o,i)&&function(e,t){return t>=1&&t<=(xe(e)?366:365)}(t,a)?(s.setUTCFullYear(t,o,Math.max(a,i)),s):new Date(NaN)}function Ce(e){return e?parseInt(e):1}function ke(e){var t=e.match(ye);if(!t)return null;var n=Te(t[1]),r=Te(t[2]),a=Te(t[3]);return function(e,t,n){return 24===e?0===t&&0===n:n>=0&&n<60&&t>=0&&t<60&&e>=0&&e<25}(n,r,a)?n*fe+6e4*r+1e3*a:NaN}function Te(e){return e&&parseFloat(e.replace(",","."))||0}function De(e){if("Z"===e)return 0;var t=e.match(pe);if(!t)return 0;var n="+"===t[1]?-1:1,r=parseInt(t[2]),a=t[3]&&parseInt(t[3])||0;return function(e,t){return t>=0&&t<=59}(0,a)?n*(r*fe+6e4*a):NaN}var qe=[31,null,31,30,31,30,31,31,30,31,30,31];function xe(e){return e%400==0||e%4==0&&e%100}function Me(e){const t=new Date;let n;return n=e>0?function(e,t){if(d(2,arguments),!t||"object"!=typeof t)return new Date(NaN);var n="years"in t?s(t.years):0,r="months"in t?s(t.months):0,a="weeks"in t?s(t.weeks):0,o="days"in t?s(t.days):0,i="hours"in t?s(t.hours):0,u="minutes"in t?s(t.minutes):0,c="seconds"in t?s(t.seconds):0,h=l(e),g=r||n?f(h,r+12*n):h,y=o||a?m(g,o+7*a):g,p=1e3*(c+60*(u+60*i));return new Date(y.getTime()+p)}(t,{days:e}):0==e?t:function(e,t){if(d(2,arguments),!t||"object"!=typeof t)return new Date(NaN);var n="years"in t?s(t.years):0,r="months"in t?s(t.months):0,a="weeks"in t?s(t.weeks):0,o="days"in t?s(t.days):0,i="hours"in t?s(t.hours):0,u="minutes"in t?s(t.minutes):0,c="seconds"in t?s(t.seconds):0,m=h(g(l(e),r+12*n),o+7*a),f=1e3*(c+60*(u+60*i));return new Date(m.getTime()-f)}(t,{days:Math.abs(e)}),se(n,"yyyy-MM-dd")}function je(e){const t=new Date;return function(e,t){d(2,arguments);var n=le(e),r=le(t),a=n.getTime()-_(n),o=r.getTime()-_(r);return Math.round((a-o)/me)}(we(e),t)}function Ee(e){if(""===e)return"";const t=je(e);return t<-1?se(we(e),"MMM d"):-1===t?"Yesterday":0===t?"Today":1===t?"Tomorrow":se(we(e),t>1&&t<=7?"EEEE":t>7&&t<365?"MMM d":"MMM d y")}function Ne(e){return je(e)<0}let Pe,Ue;function Le(){Pe=JSON.parse(localStorage.getItem("tasks")),Ue=JSON.parse(localStorage.getItem("userProjects")),null===Pe?(console.log("User data not found - generating tasks"),Pe=function(){let e=[];return e.push(c("Clean room",3,Me(-4),"Inbox")),e.push(c("Laundry",2,Me(0),"Inbox")),e.push(c("Taxes",1,Me(4),"Inbox")),e.push(c("Vacation",2,Me(400),"Inbox")),e.push(c("Study for exam",4,Me(10),"School")),e.push(c("Math problems",2,Me(-1),"School")),e.push(c("History reading",3,Me(1),"School")),e.push(c("Final presentation",1,Me(40),"School")),e.push(c("Milk",4,"","Groceries")),e.push(c("Eggs",4,"","Groceries")),e.push(c("Cheese",4,"","Groceries")),e}(),Ue=["School","Groceries"],localStorage.setItem("tasks",JSON.stringify(Pe)),localStorage.setItem("userProjects",JSON.stringify(Ue))):console.log("Previous user data found")}function Oe(){return Pe}function We(e){Pe=Pe.filter((t=>t.id!==e)),localStorage.setItem("tasks",JSON.stringify(Pe))}function Ye(){return Ue}function Ie(e,t){let n;document.querySelectorAll(".project").forEach((e=>{e.classList.remove("current-project")})),document.querySelectorAll(".task").forEach((e=>{e.remove()})),document.querySelector(`[data-name="${e}"]`).classList.add("current-project"),document.querySelector("#cur-project-name").textContent=e,n="Today"===e?Oe().filter((e=>je(e.dueDate)<=0)):"This Week"===e?Oe().filter((e=>je(e.dueDate)<=7)):Oe().filter((t=>t.project===e)),"Due date"===t?(n.sort(Fe),document.querySelector("#sort-select").value="Due date"):"Priority"===t?(n.sort(ze),document.querySelector("#sort-select").value="Priority"):"Alphabetical"===t&&(n.sort(He),document.querySelector("#sort-select").value="Alphabetical");const r=document.querySelector("#cur-project-container");for(const e of n){const t=document.createElement("div");t.classList.add("task");const n=document.createElement("button");n.classList.add("task-check"),n.dataset.priority=e.priority;const a=document.createElement("img");a.src=`../img/circle-p${e.priority}.svg`,n.appendChild(a),n.addEventListener("click",(()=>{We(e.id),Ie(document.querySelector("#cur-project-name").textContent,document.querySelector("#sort-select").value)})),t.appendChild(n);const o=document.createElement("span");o.classList.add("task-name"),o.textContent=e.name,t.appendChild(o);const i=document.createElement("time");i.classList.add("task-due-date"),i.textContent=Ee(e.dueDate),Ne(e.dueDate)&&i.classList.add("late"),t.appendChild(i);const u=document.createElement("button");u.classList.add("task-edit");const c=document.createElement("img");c.src="../img/pencil.svg",u.appendChild(c),u.addEventListener("click",(()=>{Ge("#edit-task-project"),document.querySelector("#new-modal").style.display="block",document.querySelector("#edit-task-form").style.display="flex",document.querySelector("#edit-task-form").dataset.id=e.id,document.querySelector("#edit-task-form").dataset.name=e.name,document.querySelector("#edit-task-form").dataset.priority=e.priority,document.querySelector("#edit-task-form").dataset.dueDate=e.dueDate,document.querySelector("#edit-task-form").dataset.project=e.project,document.querySelector("#edit-task-name").value=e.name,document.querySelector("#edit-task-priority").value=e.priority,document.querySelector("#edit-task-date").value=e.dueDate,document.querySelector("#edit-task-project").value=e.project})),t.appendChild(u),r.appendChild(t)}}function Fe(e,t){return(e.dueDate<t.dueDate||""===t.dueDate)&&""!==e.dueDate?-1:(e.dueDate>t.dueDate||""===e.dueDate)&&""!==t.dueDate?1:0}function ze(e,t){return e.priority<t.priority?-1:e.priority>t.priority?1:0}function He(e,t){return e.name<t.name?-1:e.name>t.name?1:0}function Ae(){document.querySelectorAll("#user-projects > .project").forEach((e=>{e.remove()}));const e=Ye(),t=document.querySelector("#user-projects");for(const n of e){const e=document.createElement("div");e.classList.add("project"),e.dataset.name=n;const r=document.createElement("img");r.src="../img/list-check.svg",e.appendChild(r);const a=document.createElement("span");a.textContent=n,e.appendChild(a);const o=document.createElement("button");o.classList.add("project-edit");const i=document.createElement("img");i.src="../img/pencil.svg",o.appendChild(i),o.addEventListener("click",(e=>{document.querySelector("#cur-project-name").textContent===n&&e.stopPropagation(),document.querySelector("#new-modal").style.display="block",document.querySelector("#edit-project-form").style.display="flex",document.querySelector("#edit-project-name").value=n})),e.appendChild(o),e.addEventListener("click",(function(){Ie(n,"Due date")})),t.appendChild(e)}}function Ge(e){const t=document.querySelector(e);t.replaceChildren();const n=document.createElement("option");n.value="Inbox",n.text="Inbox",t.add(n);const r=Ye();for(const e of r){const n=document.createElement("option");n.value=e,n.text=e,t.add(n)}}function Xe(){document.querySelector("#new-task-submit").disabled=!0,document.querySelector("#new-task-form").reset(),document.querySelector("#new-task-form").style.display="none",document.querySelector("#new-project-error").textContent="",document.querySelector("#new-project-submit").disabled=!0,document.querySelector("#new-project-form").reset(),document.querySelector("#new-project-form").style.display="none",document.querySelector("#edit-project-error").textContent="",document.querySelector("#edit-project-submit").disabled=!0,document.querySelector("#edit-project-form").style.display="none",document.querySelector("#edit-task-submit").disabled=!0,document.querySelector("#edit-task-form").style.display="none",document.querySelector("#new-modal").style.display="none"}Le(),Ae(),Ie("Inbox","Due date");const Je=document.querySelector("#add-task"),Qe=document.querySelector("#new-task-form"),Re=document.querySelector("#new-project"),Be=document.querySelector("#new-project-form"),$e=document.querySelector("#new-modal");Je.addEventListener("click",(()=>{Ge("#new-task-project"),$e.style.display="block",Qe.style.display="flex"})),Re.addEventListener("click",(()=>{$e.style.display="block",Be.style.display="flex"}));const Ve=document.querySelector("#default-projects").childNodes;for(let e of Ve)e.addEventListener("click",(function(){Ie(e.dataset.name,"Due date")}));document.querySelector("#demo-reset").addEventListener("click",(()=>{localStorage.clear(),Le(),Ae(),Ie("Inbox","Due date")})),document.querySelector("#demo-blank").addEventListener("click",(()=>{Pe=[],Ue=[],localStorage.setItem("tasks",JSON.stringify(Pe)),localStorage.setItem("userProjects",JSON.stringify(Ue)),Ae(),Ie("Inbox","Due date")})),document.querySelector("#sort-select").addEventListener("change",(e=>{Ie(document.querySelector("#cur-project-name").textContent,e.target.value)})),document.querySelector("#new-task-name").addEventListener("input",(()=>{const e=document.querySelector("#new-task-submit");document.querySelector("#new-task-name").value.trim().length<1?e.disabled=!0:e.disabled=!1})),document.querySelector("#new-task-form").addEventListener("submit",(e=>{e.preventDefault(),function(e,t,n,r){const a=c(e,t,n,r);Pe.push(a),localStorage.setItem("tasks",JSON.stringify(Pe))}(document.querySelector("#new-task-name").value.trim(),document.querySelector("#new-task-priority").value,document.querySelector("#new-task-date").value,document.querySelector("#new-task-project").value),Xe(),Ie(document.querySelector("#cur-project-name").textContent,document.querySelector("#sort-select").value)})),document.querySelector("#new-project-name").addEventListener("input",(()=>{const e=document.querySelector("#new-project-name").value.trim(),t=["Inbox","Today","This Week"].concat(Ye()),n=document.querySelector("#new-project-submit");let r=document.querySelector("#new-project-error");e.length<1?(n.disabled=!0,r.textContent=""):t.includes(e)?(n.disabled=!0,r.textContent="This project already exists"):(n.disabled=!1,r.textContent="")})),document.querySelector("#new-project-form").addEventListener("submit",(e=>{e.preventDefault();var t;t=document.querySelector("#new-project-name").value.trim(),Ue.push(t),localStorage.setItem("userProjects",JSON.stringify(Ue)),Xe(),Ae()})),document.querySelector("#edit-project-name").addEventListener("input",(()=>{const e=document.querySelector("#edit-project-name").value.trim(),t=document.querySelector("#cur-project-name").textContent,n=["Inbox","Today","This Week"].concat(Ye()),r=document.querySelector("#edit-project-submit");let a=document.querySelector("#edit-project-error");e.length<1||e===t?(r.disabled=!0,a.textContent=""):n.includes(e)&&e!==t?(r.disabled=!0,a.textContent="This project already exists"):(r.disabled=!1,a.textContent="")})),document.querySelector("#edit-project-form").addEventListener("submit",(e=>{e.preventDefault();const t=document.querySelector("#cur-project-name").textContent,n=document.querySelector("#edit-project-name").value.trim();!function(e,t){Ue[Ue.indexOf(e)]=t,Pe.forEach((n=>{n.project===e&&(n.project=t)})),localStorage.setItem("tasks",JSON.stringify(Pe)),localStorage.setItem("userProjects",JSON.stringify(Ue))}(t,n),Xe(),Ae(),Ie(n,document.querySelector("#sort-select").value)})),document.querySelector("#edit-project-delete").addEventListener("click",(()=>{const e=document.querySelector("#cur-project-name").textContent;var t;confirm(`Are you sure you want to delete Project "${e}"? All tasks under the project will also be deleted. This action cannot be undone.`)&&(t=e,Pe=Pe.filter((e=>e.project!==t)),Ue.splice(Ue.indexOf(t),1),localStorage.setItem("tasks",JSON.stringify(Pe)),localStorage.setItem("userProjects",JSON.stringify(Ue)),Xe(),Ae(),Ie("Inbox","Due date"))}));const Ze=document.querySelector("#edit-task-form"),_e=document.querySelector("#edit-task-submit");let Ke=!1,et=!1,tt=!1,nt=!1,rt=!1;function at(){let e=!1;(et||tt||nt||rt)&&(e=!0),Ke&&(e=!1),_e.disabled=!e}const ot=document.querySelector("#edit-task-name");ot.addEventListener("input",(()=>{ot.value.trim().length<1?(Ke=!0,et=!0):ot.value.trim()===Ze.dataset.name?(Ke=!1,et=!1):(Ke=!1,et=!0),at()}));const it=document.querySelector("#edit-task-priority");it.addEventListener("input",(()=>{tt=it.value!==Ze.dataset.priority,at()}));const ut=document.querySelector("#edit-task-date");ut.addEventListener("input",(()=>{nt=ut.value!==Ze.dataset.dueDate,at()}));const ct=document.querySelector("#edit-task-project");function st(){Ke=et=tt=nt=rt=!1}ct.addEventListener("input",(()=>{rt=ct.value!==Ze.dataset.project,at()})),Ze.addEventListener("submit",(e=>{e.preventDefault(),function(e,t,n,r,a){let o;for(let t=0;t<Pe.length;t++)Pe[t].id===e&&(o=Pe[t]);o.name=t,o.priority=n,o.dueDate=r,o.project=a,localStorage.setItem("tasks",JSON.stringify(Pe))}(Ze.dataset.id,ot.value.trim(),it.value,ut.value,ct.value),st(),Xe(),Ie(document.querySelector("#cur-project-name").textContent,document.querySelector("#sort-select").value)})),document.querySelector("#edit-task-delete").addEventListener("click",(()=>{confirm(`Are you sure want to delete Task "${Ze.dataset.name}"? This action cannot be undone.`)&&(We(Ze.dataset.id),st(),Xe(),Ie(document.querySelector("#cur-project-name").textContent,document.querySelector("#sort-select").value))})),$e.addEventListener("mousedown",(e=>{e.target==$e&&(st(),Xe())})),document.querySelectorAll(".form-cancel").forEach((e=>{e.addEventListener("click",(()=>{st(),Xe()}))})),document.addEventListener("keydown",(e=>{"Escape"===e.key&&(st(),Xe())}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,